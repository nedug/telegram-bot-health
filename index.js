const TelegramApi = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const UserModel = require('./models');
require('dotenv').config();


const token = process.env.TG_TOKEN;

const bot = new TelegramApi(token, {polling: true});


const start = async () => {

    try {
        await new mongoose.connect(process.env.DB_URL); /* –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ MongoDB */
    } catch (e) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ —Å–ª–æ–º–∞–ª–æ—Å—å', e);
    }


    let users = await UserModel.find();

    let timerId;


    users.forEach(u => {

        timerId = setInterval(async () => {

            let user = await UserModel.findOne({chatId: u.chatId});

            user.withoutAlcohol += 1;
            user.withoutCigarette += 1;

            user = await user.save();

            const {
                withoutAlcohol,
                withoutCigarette,
                moneyAlcohol,
                moneyCigarette,
                cigaretteOneDay,
                beerOneDay,
                stiffOneDay,
            } = user;

            const formatter = new Intl.NumberFormat('ru', {
                style: 'unit',
                unit: 'day',
                unitDisplay: 'long',
            });

            return bot.sendMessage(chatId, `
–ù–µ –ø—å—é: <b>${formatter.format(withoutAlcohol)}</b>  üîû
–ù–µ –∫—É—Ä—é: <b>${formatter.format(withoutCigarette)}</b>  üö≠

–°—ç–∫–æ–Ω–æ–º–∏–ª –¥–µ–Ω–µ–≥: <b>${( withoutAlcohol * moneyAlcohol + withoutCigarette * moneyCigarette ).toFixed(1)} $</b>  üíµ

–ù–µ –≤—ã–∫—É—Ä–∏–ª —Å–∏–≥–∞—Ä–µ—Ç: <b>${( withoutCigarette * cigaretteOneDay ).toFixed()} —à—Ç</b>  üö¨

–ù–µ –≤—ã–ø–∏–ª –ø–∏–≤–∞: <b>${( withoutAlcohol * beerOneDay ).toFixed(1)} –ª</b>  üç∫

–ù–µ –≤—ã–ø–∏–ª –≤–∏—Å–∫–∏: <b>${( withoutAlcohol * stiffOneDay ).toFixed(1)} –ª</b>  üç∏
`, {parse_mode: 'HTML'})
                .catch(error => {
                    console.log(error.response.body);
                });
        }, 86400000);
    })


    bot.setMyCommands([
        {command: '/start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},

        {command: '/info', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ'},

        {command: '/settings', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'},
    ]);

    bot.on('message', async msg => {

            const text = msg.text;
            const chatId = msg.chat.id;

            try {
                if (text === '/start') {
                    const user = await UserModel.findOne({chatId});

                    if (!user) {
                        await UserModel.create({chatId});

                        clearInterval(timerId);

                        users = await UserModel.find();

                        users.forEach(u => {

                            timerId = setInterval(async () => {

                                let user = await UserModel.findOne({chatId: u.chatId});

                                user.withoutAlcohol += 1;
                                user.withoutCigarette += 1;

                                user = await user.save();

                                const {
                                    withoutAlcohol,
                                    withoutCigarette,
                                    moneyAlcohol,
                                    moneyCigarette,
                                    cigaretteOneDay,
                                    beerOneDay,
                                    stiffOneDay,
                                } = user;

                                const formatter = new Intl.NumberFormat('ru', {
                                    style: 'unit',
                                    unit: 'day',
                                    unitDisplay: 'long',
                                });

                                return bot.sendMessage(chatId, `
–ù–µ –ø—å—é: <b>${formatter.format(withoutAlcohol)}</b>  üîû
–ù–µ –∫—É—Ä—é: <b>${formatter.format(withoutCigarette)}</b>  üö≠

–°—ç–∫–æ–Ω–æ–º–∏–ª –¥–µ–Ω–µ–≥: <b>${( withoutAlcohol * moneyAlcohol + withoutCigarette * moneyCigarette ).toFixed(1)} $</b>  üíµ

–ù–µ –≤—ã–∫—É—Ä–∏–ª —Å–∏–≥–∞—Ä–µ—Ç: <b>${( withoutCigarette * cigaretteOneDay ).toFixed()} —à—Ç</b>  üö¨

–ù–µ –≤—ã–ø–∏–ª –ø–∏–≤–∞: <b>${( withoutAlcohol * beerOneDay ).toFixed(1)} –ª</b>  üç∫

–ù–µ –≤—ã–ø–∏–ª –≤–∏—Å–∫–∏: <b>${( withoutAlcohol * stiffOneDay ).toFixed(1)} –ª</b>  üç∏
`, {parse_mode: 'HTML'})
                                    .catch(error => {
                                        console.log(error.response.body);
                                    });
                            }, 86400000);
                        })

                        //                         setInterval(async () => {
                        //
                        //                             let user = await UserModel.findOne({chatId});
                        //
                        //                             user.withoutAlcohol += 1;
                        //                             user.withoutCigarette += 1;
                        //
                        //                             user = await user.save();
                        //
                        //                             const {
                        //                                 withoutAlcohol,
                        //                                 withoutCigarette,
                        //                                 moneyAlcohol,
                        //                                 moneyCigarette,
                        //                                 cigaretteOneDay,
                        //                                 beerOneDay,
                        //                                 stiffOneDay
                        //                             } = user;
                        //
                        //                             return bot.sendMessage(chatId, `
                        // –ù–µ –ø—å—é: <b>${withoutAlcohol}</b> –¥–Ω  üîû
                        // –ù–µ –∫—É—Ä—é: <b>${withoutCigarette}</b> –¥–Ω  üö≠
                        //
                        // –°—ç–∫–æ–Ω–æ–º–∏–ª –¥–µ–Ω–µ–≥: <b>${(withoutAlcohol * moneyAlcohol + withoutCigarette * moneyCigarette).toFixed(1)}</b> $  üíµ
                        //
                        // –ù–µ –≤—ã–∫—É—Ä–∏–ª —Å–∏–≥–∞—Ä–µ—Ç: <b>${(withoutCigarette * cigaretteOneDay).toFixed()}</b> —à—Ç  üö¨
                        //
                        // –ù–µ –≤—ã–ø–∏–ª –ø–∏–≤–∞: <b>${(withoutAlcohol * beerOneDay).toFixed(1)}</b> –ª  üç∫
                        //
                        // –ù–µ –≤—ã–ø–∏–ª –≤–∏—Å–∫–∏: <b>${(withoutAlcohol * stiffOneDay).toFixed(1)}</b> –ª  üç∏
                        // `, {parse_mode: 'HTML'})
                        //                                 .catch(error => {
                        //                                     console.log(error.response.body);
                        //                                 });
                        //                         }, 900000)
                    }

                    await bot.sendMessage(chatId, `<b>${msg.from.first_name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!`, {parse_mode: 'HTML'});
                    return bot.sendMessage(chatId, `T—É—Ç –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–Ω–µ–π
–±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è –∏ —Å–∏–≥–∞—Ä–µ—Ç!  üí™ ‚òò üíúÔ∏è üöÄ`, {parse_mode: 'HTML'});
                }

                if (text === '/info') {
                    const chatId = msg.chat.id;

                    const {
                        withoutAlcohol,
                        withoutCigarette,
                        moneyAlcohol,
                        moneyCigarette,
                        cigaretteOneDay,
                        beerOneDay,
                        stiffOneDay,
                    } = await UserModel.findOne({chatId});

                    const formatter = new Intl.NumberFormat('ru', {
                        style: 'unit',
                        unit: 'day',
                        unitDisplay: 'long',
                    });

                    return bot.sendMessage(chatId, `
–ù–µ –ø—å—é: <b>${formatter.format(withoutAlcohol)}</b>  üîû
–ù–µ –∫—É—Ä—é: <b>${formatter.format(withoutCigarette)}</b>  üö≠

–°—ç–∫–æ–Ω–æ–º–∏–ª –¥–µ–Ω–µ–≥: <b>${( withoutAlcohol * moneyAlcohol + withoutCigarette * moneyCigarette ).toFixed(1)} $</b>  üíµ

–ù–µ –≤—ã–∫—É—Ä–∏–ª —Å–∏–≥–∞—Ä–µ—Ç: <b>${( withoutCigarette * cigaretteOneDay ).toFixed()} —à—Ç</b>  üö¨

–ù–µ –≤—ã–ø–∏–ª –ø–∏–≤–∞: <b>${( withoutAlcohol * beerOneDay ).toFixed(1)} –ª</b>  üç∫

–ù–µ –≤—ã–ø–∏–ª –≤–∏—Å–∫–∏: <b>${( withoutAlcohol * stiffOneDay ).toFixed(1)} –ª</b>  üç∏
`, {parse_mode: 'HTML'})
                        .catch(error => {
                            console.log(error.response.body);
                        })
                }

                if (text === '/settings') {
                    // await bot.sendMessage(chatId, `–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!`);
                    await bot.sendMessage(chatId, `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
–Ω–µ –ø—å—é: 0 –¥–Ω
–Ω–µ –∫—É—Ä—é: 10 –¥–Ω
–°—ç–∫–æ–Ω–æ–º–∏–ª –¥–µ–Ω–µ–≥: 0 $
–ù–µ –≤—ã–∫—É—Ä–∏–ª —Å–∏–≥–∞—Ä–µ—Ç: 0 —à—Ç
–ù–µ –≤—ã–ø–∏–ª –ø–∏–≤–∞: 0 –ª
–ù–µ –≤—ã–ø–∏–ª –≤–∏—Å–∫–∏: 0 –ª
`);
                    return bot.sendMessage(chatId, `–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∂–∏—Ç–µ –±–æ—Ç—É:
–Ω–µ –ø—å—é:                  
–Ω–µ –∫—É—Ä—é:
–Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å:
–Ω–∞ —Å–∏–≥–∞—Ä–µ—Ç—ã:
—Å–∏–≥–∞—Ä–µ—Ç –≤ –¥–µ–Ω—å:
–ø–∏–≤–∞ –≤ –¥–µ–Ω—å:
–∫—Ä–µ–ø–∫–∏—Ö –≤ –¥–µ–Ω—å:
                    `);
                }

            } catch (e) {
                return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞!)');
            }
        },
    );


    bot.onText(/–Ω–µ –ø—å—é: (.+)/, async (msg, [source, match]) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({chatId});
        user.withoutAlcohol = match;
        await user.save();

        return bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    });

    bot.onText(/–Ω–µ –∫—É—Ä—é: (.+)/, async (msg, [source, match]) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({chatId});
        user.withoutCigarette = match;
        await user.save();

        return bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    });

    bot.onText(/–Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å: (.+)/, async (msg, [source, match]) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({chatId});
        user.moneyAlcohol = match;
        await user.save();

        return bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    });

    bot.onText(/–Ω–∞ —Å–∏–≥–∞—Ä–µ—Ç—ã: (.+)/, async (msg, [source, match]) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({chatId});
        user.moneyCigarette = match;
        await user.save();

        return bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    });

    bot.onText(/—Å–∏–≥–∞—Ä–µ—Ç –≤ –¥–µ–Ω—å: (.+)/, async (msg, [source, match]) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({chatId});
        user.cigaretteOneDay = match;
        await user.save();

        return bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    });

    bot.onText(/–ø–∏–≤–∞ –≤ –¥–µ–Ω—å: (.+)/, async (msg, [source, match]) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({chatId});
        user.beerOneDay = match;
        await user.save();

        return bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    });

    bot.onText(/–∫—Ä–µ–ø–∫–∏—Ö –≤ –¥–µ–Ω—å: (.+)/, async (msg, [source, match]) => {
        const chatId = msg.chat.id;

        const user = await UserModel.findOne({chatId});
        user.stiffOneDay = match;
        await user.save();

        return bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    });
};


start();


